# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.99.0"

SLACK_POST = true
if ENV['SLACK_ROOM'].nil? or ENV['SLACK_ROOM'].empty?
  SLACK_POST = false
end
if ENV['SLACK_URL'].nil? or ENV['SLACK_URL'].empty?
  SLACK_POST = false
end

platform :android do
  lane :playstore do |options|
    upload_to_play_store(
      track: options[:track], 
      apk: "#{ENV['METEOR_OUTPUT_ABSOLUTE']}/android/production.apk", 
      json_key: "#{ENV['PLAY_AUTH_FILE']}",
      package_name: ENV['APP_IDENTIFIER']
    )
  end
end

platform :mac do
  lane :deploy_desktop do
    if lane_context[SharedValues::PLATFORM_NAME] == :mac
      setup_travis
    end
    deliver(
      username: ENV['APPLE_ID'],
      force: true,
      app_identifier: ENV['DESKTOP_APP_IDENTIFIER'],
      pkg: "#{ENV['DESKTOP_APP_PATH']}/#{ENV['DESKTOP_APP_NAME']}.pkg",
      run_precheck_before_submit: false
    )
  end
end

platform :ios do
  private_lane :build_app_production do
    sigh(
      app_identifier: ENV['APP_IDENTIFIER'],
      username: ENV['APPLE_ID']
    )

    update_project_provisioning(
      xcodeproj: "#{ENV['METEOR_OUTPUT_ABSOLUTE']}/ios/project/#{ENV['XCODE_SCHEME_NAME']}.xcodeproj",
      profile: lane_context[SharedValues::SIGH_PROFILE_PATH],
      target_filter: ENV['XCODE_SCHEME_NAME'],
      build_configuration: "Release"
    )
    
    gym(
      scheme: ENV['XCODE_SCHEME_NAME'],
      project: "#{ENV['METEOR_OUTPUT_ABSOLUTE']}/ios/project/#{ENV['XCODE_SCHEME_NAME']}.xcodeproj",
      include_bitcode: false,
      export_method: "app-store"
    )
  end

  private_lane :build_app_ad_hoc do
    sigh(
      app_identifier: ENV['APP_IDENTIFIER'],
      username: ENV['APPLE_ID'],
      adhoc: true,
      skip_certificate_verification: true
    )

    update_project_provisioning(
      xcodeproj: "#{ENV['METEOR_OUTPUT_ABSOLUTE']}/ios/project/#{ENV['XCODE_SCHEME_NAME']}.xcodeproj",
      profile: lane_context[SharedValues::SIGH_PROFILE_PATH],
      target_filter: ENV['XCODE_SCHEME_NAME'],
      build_configuration: "Release"
    )

    gym(
      use_legacy_build_api: true,
      scheme: ENV['XCODE_SCHEME_NAME'],
      project: "#{ENV['METEOR_OUTPUT_ABSOLUTE']}/ios/project/#{ENV['XCODE_SCHEME_NAME']}.xcodeproj",
      include_bitcode: false,
      export_method: "ad-hoc",
    )
  end

  desc "Just build the app"
  lane :build do
    if lane_context[SharedValues::PLATFORM_NAME] == :ios
      setup_travis
    end
    build_app_production
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    if lane_context[SharedValues::PLATFORM_NAME] == :ios
      setup_travis
    end
    import_certificates

    build_app_production

    pilot(
      username: ENV['APPLE_ID'],
      skip_waiting_for_build_processing: true
    )
  end

  desc "Submit a new Beta Build to Hockey"
  desc "This will also make sure the profile is up to date"
  lane :hockey do
    if lane_context[SharedValues::PLATFORM_NAME] == :ios
      setup_travis
    end
    import_certificates

    build_app_ad_hoc

    hockey(
      api_token: ENV['IOS_HOCKEY_TOKEN'],
      notify: "0",
      status: "1"
    )
  end

  desc "Deploy a new version to the App Store"
  desc "** Full Markdown** Support: `code`"
  lane :deploy do
    if lane_context[SharedValues::PLATFORM_NAME] == :ios
      setup_travis
    end
    build_app_production

    deliver(
      username: ENV['APPLE_ID'],
      force: true
    )
  end

  lane :install_certs do
    if lane_context[SharedValues::PLATFORM_NAME] == :ios
      setup_travis
    end
    import_certificates
    update_project_provisioning(
      xcodeproj: "#{ENV['METEOR_OUTPUT_ABSOLUTE']}/ios/project/#{ENV['XCODE_SCHEME_NAME']}.xcodeproj",
      build_configuration: "Release",
      target_filter: ENV['XCODE_SCHEME_NAME'],
      code_signing_identity: "iPhone Development" # optionally specify the codesigning identity
    )
  end

  after_all do |lane|
    if SLACK_POST
      slack(
        message: "App successfully released through: #{lane}",
        channel: ENV['SLACK_ROOM'],
        slack_url: ENV['SLACK_URL']
      )
    end
  end

  error do |lane, exception|
    if SLACK_POST
      slack(
        message: "Lane #{lane} failed! #{exception}",
        channel: ENV['SLACK_ROOM'],
        slack_url: ENV['SLACK_URL'],
        success: false
      )
    end
  end

  def import_certificates
    match(
      git_url: ENV['CERTS_GIT_URL'],
      app_identifier: ENV['APP_IDENTIFIER'],
      username: ENV['APPLE_ID'],
      readonly: true,
      type: "development"
    )

    match(
      git_url: ENV['CERTS_GIT_URL'],
      app_identifier: ENV['APP_IDENTIFIER'],
      username: ENV['APPLE_ID'],
      readonly: true,
      type: "adhoc"
    )

    match(
      git_url: ENV['CERTS_GIT_URL'],
      app_identifier: ENV['APP_IDENTIFIER'],
      username: ENV['APPLE_ID'],
      readonly: true,
      type: "appstore"
    )
  end
end


# More information about multiple platforms in fastlane:
# https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
