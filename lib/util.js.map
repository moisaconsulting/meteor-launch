{"version":3,"sources":["../src/util.js"],"names":["setMeteorInputDir","dir","length","process","cwd","setMeteorOutputDir","generateSettings","originalEnv","launchFile","launchVars","require","error","METEOR_INPUT_DIR","METEOR_OUTPUT_DIR","METEOR_OUTPUT_ABSOLUTE","otherVars","SIGH_OUTPUT_PATH","GYM_OUTPUT_DIRECTORY","FL_REPORT_PATH","XCODE_PROJECT","XCODE_SCHEME_NAME","result","ANDROID_ZIPALIGN","env","HOME","slice","cleanMeteorOutputDir","Promise","resolve","rimraf","sync","init","e","console","log","err","exampleLaunchFile","__dirname","targetLaunchFile","contents","indexOf","argv","exit","addFastfile","fastfileLocation","fastfileTarget","removeFastfile","importCerts","stdio","hasPlatform","platform","platforms","toString","getVersion","version"],"mappings":"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","file":"util.js","sourcesContent":["import {\n  join,\n  resolve as pathResolve,\n} from \"path\";\nimport {\n  stat,\n  readFileSync,\n  writeFileSync,\n  statSync,\n  mkdirSync,\n} from \"fs\";\nimport { execSync } from \"child_process\";\nimport rimraf from \"rimraf\";\nimport { extend } from \"underscore\";\nimport { version } from \"../package.json\";\n\nconst setMeteorInputDir = (dir) => {\n  if (\n    typeof dir === \"undefined\" ||\n    dir.length === 0\n  ) {\n    return process.cwd();\n  }\n  return pathResolve(process.cwd(), dir);\n};\n\nconst setMeteorOutputDir = (dir) => {\n  if (\n    typeof dir === \"undefined\" ||\n    dir.length === 0\n  ) {\n    return \".build\";\n  }\n  return dir;\n};\n\nconst generateSettings = (originalEnv) => {\n  const launchFile = join(process.cwd(), \"launch.json\");\n  let launchVars = {};\n  try {\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    launchVars = require(launchFile);\n    // eslint-disable-next-line no-empty\n  } catch (error) { return {}; }\n  launchVars.METEOR_INPUT_DIR = setMeteorInputDir(launchVars.METEOR_INPUT_DIR);\n  launchVars.METEOR_OUTPUT_DIR = setMeteorOutputDir(launchVars.METEOR_OUTPUT_DIR);\n  launchVars.METEOR_OUTPUT_ABSOLUTE = pathResolve(launchVars.METEOR_OUTPUT_DIR);\n  const otherVars = {\n    SIGH_OUTPUT_PATH: process.cwd(),\n    GYM_OUTPUT_DIRECTORY: process.cwd(),\n    FL_REPORT_PATH: join(\n      process.cwd(),\n      launchVars.METEOR_OUTPUT_DIR,\n      \"ios\",\n    ),\n    XCODE_PROJECT: pathResolve(\n      launchVars.METEOR_OUTPUT_DIR,\n      \"ios\",\n      \"project\",\n      `${launchVars.XCODE_SCHEME_NAME}.xcodeproj`,\n    ),\n  };\n  const result = extend(launchVars, otherVars, originalEnv);\n  // make relative\n  return extend(\n    result,\n    {\n      ANDROID_ZIPALIGN: result.ANDROID_ZIPALIGN[0] === \"~\" ?\n        join(process.env.HOME, result.ANDROID_ZIPALIGN.slice(1)) :\n        pathResolve(result.ANDROID_ZIPALIGN),\n    },\n  );\n};\n\nconst cleanMeteorOutputDir = env => (\n  new Promise((resolve) => {\n    rimraf.sync(env.METEOR_OUTPUT_DIR);\n    return resolve();\n  })\n);\n\nconst init = () => (\n  new Promise((resolve) => {\n    const launchFile = join(process.cwd(), \"launch.json\");\n    try {\n      execSync(\"which fastlane\");\n    } catch (e) {\n      /* istanbul ignore next */\n      console.log(\"Installing fastlane...\");\n      /* istanbul ignore next */\n      execSync(\"sudo gem install fastlane\");\n    }\n\n    stat(launchFile, (err) => {\n      // file not found\n      if (err) {\n        const exampleLaunchFile = join(__dirname, \"../assets/launch.json\");\n        const targetLaunchFile = join(process.cwd(), \"launch.json\");\n\n        const contents = readFileSync(exampleLaunchFile);\n\n        writeFileSync(targetLaunchFile, contents);\n\n        return resolve(\"launch.json created. Open it and fill out the vars\");\n      }\n\n      // dont overwrite\n      return resolve(\"launch.json already exists\");\n    });\n  })\n);\n\nconst launchFile = () => {\n  // fail silently if trying to init\n  if (\n    [\"init\", \"help\", \"--version\", \"-v\"].indexOf(process.argv[2]) > -1 ||\n    typeof process.argv[2] === \"undefined\"\n  ) return false;\n\n  try {\n    statSync(`${process.cwd()}/launch.json`);\n  } catch (e) {\n    /* istanbul ignore next */\n    console.log(\"launch.json not found. Please run: launch init\");\n    /* istanbul ignore next */\n    process.exit();\n  }\n  return true;\n};\n\nconst addFastfile = () => (\n  new Promise((resolve) => {\n    const fastfileLocation = join(__dirname, \"..\", \"fastlane\", \"Fastfile\");\n    const fastfileTarget = join(process.cwd(), \".fastlane\");\n\n    try {\n      mkdirSync(fastfileTarget);\n    } catch (e) {\n      // do nothing\n    }\n\n    const contents = readFileSync(fastfileLocation);\n\n    writeFileSync(`${fastfileTarget}/Fastfile`, contents);\n\n    return resolve(\"Fastfile written...\");\n  })\n);\n\nconst removeFastfile = () => (\n  new Promise((resolve) => {\n    const fastfileTarget = join(process.cwd(), \".fastlane\");\n\n    rimraf.sync(fastfileTarget);\n\n    return resolve(\"Fastfile deleted...\");\n  })\n);\n\nconst importCerts = env => (\n  new Promise((resolve) => {\n    console.log(\"Importing certs...\");\n    execSync(\"fastlane import\", {\n      stdio: [0, 1, 2],\n      env,\n    });\n    return resolve(\"imported\");\n  })\n);\n\nconst hasPlatform = (platform) => {\n  const platforms = execSync(\"meteor list-platforms\");\n  return platforms.toString().indexOf(platform) > -1;\n};\n\nconst getVersion = () => (\n  version\n);\n\nexport default {\n  generateSettings,\n  launchFile,\n  init,\n  importCerts,\n  addFastfile,\n  removeFastfile,\n  hasPlatform,\n  getVersion,\n  cleanMeteorOutputDir,\n};\n"]}