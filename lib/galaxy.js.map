{"version":3,"sources":["../src/galaxy.js"],"names":["deploy","Promise","resolve","reject","meteorServer","process","argv","undefined","deployCommand","console","log","stdio","env","error"],"mappings":";;;;;;AAAA;;AAEA,IAAMA,SAAS,SAATA,MAAS;AAAA,SACb,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B,QAAMC,eAAeC,QAAQC,IAAR,CAAa,CAAb,CAArB;;AAEA,QAAIF,iBAAiBG,SAArB,EAAgC;AAC9B,aAAOJ,OAAO,gDAAP,CAAP;AACD;;AAED,QAAIK,wIAGcJ,YAHlB;AAIA,QAAIC,QAAQC,IAAR,CAAa,CAAb,CAAJ,EAAqB;AACnBE,wCAAgCH,QAAQC,IAAR,CAAa,CAAb,CAAhC;AACD;;AAED,QAAI;AACFG,cAAQC,GAAR,CAAY,wBAAZ;AACA,mCAASF,aAAT,EAAwB;AACtBG,eAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADe;AAEtBC;AAFsB,OAAxB;AAID,KAND,CAME,OAAOC,KAAP,EAAc;AACd,aAAOV,OAAOU,KAAP,CAAP;AACD;;AAED,WAAOX,QAAQ,UAAR,CAAP;AACD,GA1BD,CADa;AAAA,CAAf;;kBA8Be;AACbF;AADa,C","file":"galaxy.js","sourcesContent":["import { execSync } from \"child_process\";\n\nconst deploy = env => (\n  new Promise((resolve, reject) => {\n    const meteorServer = process.argv[1];\n\n    if (meteorServer === undefined) {\n      return reject(\"Please provide a server as the second argument\");\n    }\n\n    let deployCommand = `\n      DEPLOY_HOSTNAME=$GALAXY_DEPLOY_HOSTNAME \\\n      METEOR_SESSION_FILE=$GALAXY_SESSION_FILE \\\n      meteor deploy ${meteorServer}`;\n    if (process.argv[2]) {\n      deployCommand += ` --settings ${process.argv[2]}`;\n    }\n\n    try {\n      console.log(\"Deploying to Galaxy...\");\n      execSync(deployCommand, {\n        stdio: [0, 1, 2],\n        env,\n      });\n    } catch (error) {\n      return reject(error);\n    }\n\n    return resolve(\"deployed\");\n  })\n);\n\nexport default {\n  deploy,\n};\n"]}