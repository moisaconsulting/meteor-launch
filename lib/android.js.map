{"version":3,"sources":["../src/android.js"],"names":["settings","util","generateSettings","process","env","outputDir","METEOR_OUTPUT_ABSOLUTE","meteorVersion","toString","split","androidApkPath","androidApkName","buildFolder","root","crosswalk","unsignedApks","regular","crosswalkArmv7","crosswalkX86","signedApks","removeApks","console","log","Object","keys","map","rimraf","sync","apk","findCrosswalkApks","error","getSignCommands","isCrosswalk","signCommand","apkPath","getAlignCommands","alignCommand","output","prepareApk","Promise","resolve","hasPlatform","command","stdio"],"mappings":"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","file":"android.js","sourcesContent":["import { execSync } from \"child_process\";\nimport rimraf from \"rimraf\";\nimport { statSync } from \"fs\";\nimport util from \"./util\";\n\nconst settings = util.generateSettings(process.env);\nconst outputDir = settings.METEOR_OUTPUT_ABSOLUTE;\n\n// if the meteor version higher than 1.8.0 we we have to change the path apk and it's name \nconst meteorVersion = execSync('cat $PWD/.meteor/release').toString('utf8').split('@')[1];\nlet androidApkPath,\n    androidApkName;\nif (meteorVersion > '1.8.0'){\n  androidApkPath = '/android/project/app/build/outputs/apk/release';\n  androidApkName = '/app-release-unsigned.apk';\n} else {\n  androidApkPath = '/android/project/build/outputs/apk/release',\n  androidApkName = '/android-release-unsigned.apk';\n}\n\nconst buildFolder = {\n  root: `${outputDir}/android`,\n  crosswalk: outputDir + androidApkPath,\n};\n\nconst unsignedApks = {\n  regular: buildFolder.crosswalk + androidApkName,\n  crosswalkArmv7: `${buildFolder.crosswalk}/android-armv7-release-unsigned.apk`,\n  crosswalkX86: `${buildFolder.crosswalk}/android-x86-release-unsigned.apk`,\n};\n\nconst signedApks = {\n  regular: `${buildFolder.root}/production.apk`,\n  crosswalkArmv7: `${buildFolder.root}/production-armv7.apk`,\n  crosswalkX86: `${buildFolder.root}/production-x86.apk`,\n};\n\nconst removeApks = () => {\n  console.log(\"Removing existing apk...\");\n  Object.keys(signedApks).map(apk => (\n    rimraf.sync(signedApks[apk])\n  ));\n};\n\nconst findCrosswalkApks = () => {\n  try {\n    statSync(unsignedApks.crosswalkArmv7);\n    statSync(unsignedApks.crosswalkX86);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nconst getSignCommands = (isCrosswalk) => {\n  const signCommand = apkPath => (\n    `\n      jarsigner -verbose \\\n        -sigalg SHA1withRSA \\\n        -digestalg SHA1 \\\n        -storepass $ANDROID_STORE_PASS \\\n        ${apkPath} \\\n        $ANDROID_KEY\n    `\n  );\n\n  if (isCrosswalk) {\n    return [\n      signCommand(unsignedApks.crosswalkArmv7),\n      signCommand(unsignedApks.crosswalkX86),\n    ];\n  }\n  return [\n    signCommand(unsignedApks.regular),\n  ];\n};\n\nconst getAlignCommands = (isCrosswalk) => {\n  const alignCommand = (apkPath, output) => (\n    `\n      $ANDROID_ZIPALIGN 4 \\\n        ${apkPath} \\\n        ${output}\n    `\n  );\n\n  if (isCrosswalk) {\n    return [\n      alignCommand(unsignedApks.crosswalkArmv7, signedApks.crosswalkArmv7),\n      alignCommand(unsignedApks.crosswalkX86, signedApks.crosswalkX86),\n    ];\n  }\n  return [\n    alignCommand(unsignedApks.regular, signedApks.regular),\n  ];\n};\n\nconst prepareApk = env => (\n  new Promise((resolve) => {\n    if (!util.hasPlatform(\"android\")) {\n      console.log(\"Skipping Android APK preparation...\");\n      return resolve(\"skipped\");\n    }\n\n    removeApks();\n\n    const isCrosswalk = findCrosswalkApks();\n\n    console.log(\"Signing Android apk...\");\n    getSignCommands(isCrosswalk).map(command => (\n      execSync(command, {\n        stdio: [0, 1, 2],\n        env,\n      })\n    ));\n\n    console.log(\"Aligning Android apk...\");\n    getAlignCommands(isCrosswalk).map(command => (\n      execSync(command, {\n        stdio: [0, 1, 2],\n        env,\n      })\n    ));\n\n    return resolve(\"prepared\");\n  })\n);\n\nexport default {\n  prepareApk,\n  findCrosswalkApks,\n  signedApks,\n};\n"]}