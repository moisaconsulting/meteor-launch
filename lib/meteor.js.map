{"version":3,"sources":["../src/meteor.js"],"names":["build","Promise","resolve","reject","meteorServer","process","argv","undefined","buildAction","env","METEOR_INPUT_DIR","METEOR_OUTPUT_DIR","cwd","console","log","stdio","error","XCODE_PROJECT"],"mappings":";;;;;;AAAA;;AAEA,IAAMA,QAAQ,SAARA,KAAQ;AAAA,SACZ,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B,QAAMC,eAAeC,QAAQC,IAAR,CAAa,CAAb,CAArB;;AAEA,QAAIF,iBAAiBG,SAArB,EAAgC;AAC9B,aAAOJ,OAAO,gDAAP,CAAP;AACD;;AAED,QAAIK,sBAAoBC,IAAIC,gBAAxB,QAAJ;AACAF,sCAAgCC,IAAIE,iBAApC;AACAH,iEAA2DJ,YAA3D;AACA,QAAIC,QAAQC,IAAR,CAAa,CAAb,CAAJ,EAAqB;AACnBE,6CAAqCH,QAAQC,IAAR,CAAa,CAAb,CAArC;AACD;AACDE,+BAAyBH,QAAQO,GAAR,EAAzB;;AAEA,QAAI;AACFC,cAAQC,GAAR,CAAY,oBAAZ;AACA,mCAASN,WAAT,EAAsB;AACpBO,eAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AADa,OAAtB;AAGD,KALD,CAKE,OAAOC,KAAP,EAAc;AACd,aAAOb,OAAOa,KAAP,CAAP;AACD;;AAED,QAAI;AACF;AACAH,cAAQC,GAAR,CAAY,sBAAZ;AACA,mCAAS,qBAAT,EAAgC;AAC9BC,eAAO,CAAC,CAAD,CADuB;AAE9BN;AAF8B,OAAhC;AAIAI,cAAQC,GAAR,CAAYT,QAAQI,GAAR,CAAYQ,aAAxB;AACA,mCAAS,SAAT;;AAEA,aAAOf,QAAQ,OAAR,CAAP;AACD,KAXD,CAWE,OAAOc,KAAP,EAAc;AACd;AACA,aAAOd,QAAQ,OAAR,CAAP;AACD;AACF,GAvCD,CADY;AAAA,CAAd;;kBA2Ce;AACbF;AADa,C","file":"meteor.js","sourcesContent":["import { execSync } from \"child_process\";\n\nconst build = env => (\n  new Promise((resolve, reject) => {\n    const meteorServer = process.argv[1];\n\n    if (meteorServer === undefined) {\n      return reject(\"Please provide a server as the second argument\");\n    }\n\n    let buildAction = `cd ${env.METEOR_INPUT_DIR} &&`;\n    buildAction += ` meteor build ${env.METEOR_OUTPUT_DIR}`;\n    buildAction += ` --architecture os.linux.x86_64 --server ${meteorServer}`;\n    if (process.argv[2]) {\n      buildAction += ` --mobile-settings ${process.argv[2]}`;\n    }\n    buildAction += ` && cd ${process.cwd()}`;\n\n    try {\n      console.log(\"Building meteor...\");\n      execSync(buildAction, {\n        stdio: [0, 1, 2],\n      });\n    } catch (error) {\n      return reject(error);\n    }\n\n    try {\n      // opening xcode ensures the schemes exist for the project\n      console.log(\"Opening Xcode :( ...\");\n      execSync(\"open $XCODE_PROJECT\", {\n        stdio: [0],\n        env,\n      });\n      console.log(process.env.XCODE_PROJECT);\n      execSync(\"sleep 5\");\n\n      return resolve(\"built\");\n    } catch (error) {\n      // fail silently if no xcode project\n      return resolve(\"built\");\n    }\n  })\n);\n\nexport default {\n  build,\n};\n"]}