{"version":3,"sources":["../src/play.js"],"names":["uploadPlayStore","env","channel","Promise","resolve","util","hasPlatform","console","log","e","channels","test","some","el","getCommand","path","isCrosswalk","android","findCrosswalkApks","commands","signedApks","crosswalkArmv7","crosswalkX86","regular","map","command","stdio"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,OAAN;AAAA,SACtB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AACvB,QAAI,CAACC,eAAKC,WAAL,CAAiB,SAAjB,CAAL,EAAkC;AAChCC,cAAQC,GAAR,CAAY,0CAAZ;AACA,aAAOJ,QAAQ,SAAR,CAAP;AACD;;AAED,QAAI;AACF,mCAAS,cAAT;AACD,KAFD,CAEE,OAAOK,CAAP,EAAU;AACV;AACAF,cAAQC,GAAR,CAAY,sBAAZ;AACA;AACA,mCAAS,uDAAT;AACD;;AAED,QAAME,WAAW,CAAC,OAAD,EAAU,MAAV,EAAkB,YAAlB,EAAgC,SAAhC,CAAjB;;AAEA,QAAMC,OAAOD,SAASE,IAAT,CAAc,UAACC,EAAD;AAAA,aAAQA,OAAOX,OAAf;AAAA,KAAd,CAAb;;AAEA,QAAI,CAACS,IAAL,EAAWT,UAAU,OAAV;;AAEX,QAAMY,aAAa,SAAbA,UAAa;AAAA,8EAIXC,IAJW,2BAKHb,OALG;AAAA,KAAnB;;AASAK,YAAQC,GAAR,CAAY,mCAAZ;;AAEA,QAAMQ,cAAcC,kBAAQC,iBAAR,EAApB;;AAEA,QAAMC,WAAWH,cACjB,CACEF,WAAWG,kBAAQG,UAAR,CAAmBC,cAA9B,CADF,EAEEP,WAAWG,kBAAQG,UAAR,CAAmBE,YAA9B,CAFF,CADiB,GAKf,CAACR,WAAWG,kBAAQG,UAAR,CAAmBG,OAA9B,CAAD,CALF;;AAQAJ,aAASK,GAAT,CAAa;AAAA,aACX,6BAASC,OAAT,EAAkB;AAChBC,eAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADS;AAEhBzB;AAFgB,OAAlB,CADW;AAAA,KAAb;;AAOA,WAAOG,QAAQ,UAAR,CAAP;AACD,GAlDD,CADsB;AAAA,CAAxB;;kBAsDe;AACbJ;AADa,C","file":"play.js","sourcesContent":["import { execSync } from \"child_process\";\nimport android from \"./android\";\nimport util from \"./util\";\n\nconst uploadPlayStore = (env, channel) => (\n  new Promise((resolve) => {\n    if (!util.hasPlatform(\"android\")) {\n      console.log(\"Skipping Android upload to Play Store...\");\n      return resolve(\"skipped\");\n    }\n\n    try {\n      execSync(\"which playup\");\n    } catch (e) {\n      /* istanbul ignore next */\n      console.log(\"Installing playup...\");\n      /* istanbul ignore next */\n      execSync(\"npm install -g git+https://github.com/smartcrm/playup\");\n    }\n\n    const channels = ['alpha', 'beta', 'production', 'rollout'];\n\n    const test = channels.some((el) => el === channel);\n\n    if (!test) channel = 'alpha'\n\n    const getCommand = path => (\n      `\n        playup \\\n          --auth $PLAY_AUTH_FILE \\\n          ${path} \\\n          --track ${channel}\n      `\n    );\n\n    console.log(\"Uploading to Google Play Store...\");\n\n    const isCrosswalk = android.findCrosswalkApks();\n\n    const commands = isCrosswalk ?\n    [\n      getCommand(android.signedApks.crosswalkArmv7),\n      getCommand(android.signedApks.crosswalkX86),\n    ] :\n      [getCommand(android.signedApks.regular)]\n    ;\n\n    commands.map(command => (\n      execSync(command, {\n        stdio: [0, 1, 2],\n        env,\n      })\n    ));\n\n    return resolve(\"uploaded\");\n  })\n);\n\nexport default {\n  uploadPlayStore,\n};\n"]}