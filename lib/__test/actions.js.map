{"version":3,"sources":["../../src/__test/actions.js"],"names":["commands","describe","output","before","buffer","toString","map","it","command","assert","include","beforeEach","rimraf","sync","env","process","equal","launchFile","cwd","err","fail","isOk"],"mappings":";;AAGA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,WAAW,CACf,MADe,EAEf,QAFe,EAGf,OAHe,EAIf,SAJe,EAKf,QALe,EAMf,YANe,EAOf,UAPe,EAQf,WARe,EASf,YATe,EAUf,QAVe,CAAjB,C,CATA;;AAEA;;;AAoBAC,SAAS,MAAT,EAAiB,YAAM;AACrB,MAAIC,eAAJ;;AAEAC,SAAO,YAAM;AACX,QAAMC,SAAS,6BAAS,aAAT,CAAf;AACAF,aAASE,OAAOC,QAAP,EAAT;AACD,GAHD;;AAKAL,WAASM,GAAT,CAAa;AAAA,WACXC,oBAAkBC,OAAlB,EAA6B,YAAM;AACjCC,mBAAOC,OAAP,CAAeR,MAAf,EAAuBM,OAAvB;AACD,KAFD,CADW;AAAA,GAAb;AAKD,CAbD;;AAeAG,WAAW,YAAM;AACfC,mBAAOC,IAAP,CAAY,aAAZ;AACD,CAFD;;AAIAZ,SAAS,MAAT,EAAiB,YAAM;AACrBM,KAAG,uCAAH,EAA4C,YAAM;AAChD,QAAML,SAAS,6BAAS,cAAT,EAAyB;AACtCY,WAAKC,QAAQD;AADyB,KAAzB,CAAf;;AAIAL,iBAAOO,KAAP,CACEd,OAAOG,QAAP,EADF,EAEE,kDAFF;AAID,GATD;;AAWAE,KAAG,8BAAH,EAAmC,YAAM;AACvC,QAAML,SAAS,6BAAS,aAAT,EAAwB;AACrCY,WAAKC,QAAQD;AADwB,KAAxB,CAAf;;AAIAL,iBAAOC,OAAP,CACER,OAAOG,QAAP,EADF,EAEE,sDAFF;AAID,GATD;;AAWAE,KAAG,wBAAH,EAA6B,YAAM;AACjC,iCAAS,aAAT,EAAwB;AACtBO,WAAKC,QAAQD;AADS,KAAxB;AAGA,QAAMG,aAAa,gBAAKF,QAAQG,GAAR,EAAL,EAAoB,aAApB,CAAnB;;AAEA,kBAAKD,UAAL,EAAiB,UAACE,GAAD,EAAS;AACxB,UAAIA,GAAJ,EAAS;AACPV,qBAAOW,IAAP;AACD,OAFD,MAEO;AACLX,qBAAOY,IAAP;AACD;AACF,KAND;AAOD,GAbD;AAcD,CArCD","file":"actions.js","sourcesContent":["/* global describe it before beforeEach */\n\n// eslint-disable-next-line\nimport { assert } from \"chai\";\nimport { join } from \"path\";\nimport { stat } from \"fs\";\nimport { execSync } from \"child_process\";\nimport rimraf from \"rimraf\";\n\nconst commands = [\n  \"init\",\n  \"import\",\n  \"build\",\n  \"prepare\",\n  \"hockey\",\n  \"testflight\",\n  \"appstore\",\n  \"playstore\",\n  \"production\",\n  \"galaxy\",\n];\n\ndescribe(\"help\", () => {\n  let output;\n\n  before(() => {\n    const buffer = execSync(\"launch help\");\n    output = buffer.toString();\n  });\n\n  commands.map(command => (\n    it(`should have ${command}`, () => {\n      assert.include(output, command);\n    })\n  ));\n});\n\nbeforeEach(() => {\n  rimraf.sync(\"launch.json\");\n});\n\ndescribe(\"init\", () => {\n  it(\"should error when no launch.json file\", () => {\n    const output = execSync(\"launch build\", {\n      env: process.env,\n    });\n\n    assert.equal(\n      output.toString(),\n      \"launch.json not found. Please run: launch init\\n\",\n    );\n  });\n\n  it(\"should return launch message\", () => {\n    const output = execSync(\"launch init\", {\n      env: process.env,\n    });\n\n    assert.include(\n      output.toString(),\n      \"launch.json created. Open it and fill out the vars\\n\",\n    );\n  });\n\n  it(\"should add launch file\", () => {\n    execSync(\"launch init\", {\n      env: process.env,\n    });\n    const launchFile = join(process.cwd(), \"launch.json\");\n\n    stat(launchFile, (err) => {\n      if (err) {\n        assert.fail();\n      } else {\n        assert.isOk();\n      }\n    });\n  });\n});\n"]}