{"version":3,"sources":["../../src/__test/galaxy.js"],"names":["describe","exportedFunctions","map","it","exportedFunction","assert","isOk","galaxy","done","process","argv","deploy","then","fail","catch","error","equal","env","PATH","cwd","result"],"mappings":";;AAGA;;AAEA;;;;;;AALA;;AAEA;AAKAA,SAAS,QAAT,EAAmB,YAAM;AACvBA,WAAS,oBAAT,EAA+B,YAAM;AACnC,QAAMC,oBAAoB,CACxB,QADwB,CAA1B;AAGAA,sBAAkBC,GAAlB,CAAsB;AAAA,aACpBC,oBAAkBC,gBAAlB,EAAsC,YAAM;AAC1CC,qBAAOC,IAAP,CAAYC,iBAAOH,gBAAP,CAAZ;AACD,OAFD,CADoB;AAAA,KAAtB;AAKD,GATD;AAUAJ,WAAS,QAAT,EAAmB,YAAM;AACvBG,OAAG,4BAAH,EAAiC,UAACK,IAAD,EAAU;AACzCC,cAAQC,IAAR,GAAe,EAAf;AACAH,uBAAOI,MAAP,GACGC,IADH,CACQ,YAAM;AACVP,qBAAOQ,IAAP;AACAL;AACD,OAJH,EAKGM,KALH,CAKS,UAACC,KAAD,EAAW;AAChBV,qBAAOW,KAAP,CAAaD,KAAb,EAAoB,gDAApB;AACAP;AACD,OARH;AAUD,KAZD;AAaAL,OAAG,mCAAH,EAAwC,UAACK,IAAD,EAAU;AAChDC,cAAQC,IAAR,GAAe,CAAC,QAAD,EAAW,aAAX,CAAf;AACAH,uBAAOI,MAAP,GACGC,IADH,CACQ,YAAM;AACVP,qBAAOQ,IAAP;AACAL;AACD,OAJH,EAKGM,KALH,CAKS,UAACC,KAAD,EAAW;AAChBV,qBAAOC,IAAP,CAAYS,KAAZ;AACAP;AACD,OARH;AAUD,KAZD;AAaAL,OAAG,8BAAH,EAAmC,UAACK,IAAD,EAAU;AAC3CC,cAAQC,IAAR,GAAe,CAAC,QAAD,EAAW,aAAX,CAAf;AACAD,cAAQQ,GAAR,CAAYC,IAAZ,GAAsBT,QAAQU,GAAR,EAAtB,0BAAwDV,QAAQQ,GAAR,CAAYC,IAApE;AACAX,uBAAOI,MAAP,GACGC,IADH,CACQ,UAACQ,MAAD,EAAY;AAChBf,qBAAOW,KAAP,CAAaI,MAAb,EAAqB,UAArB;AACAZ;AACD,OAJH,EAKGM,KALH,CAKS,YAAM;AACXT,qBAAOQ,IAAP;AACAL;AACD,OARH;AAUD,KAbD;AAcAL,OAAG,kCAAH,EAAuC,UAACK,IAAD,EAAU;AAC/CC,cAAQC,IAAR,GAAe,CAAC,QAAD,EAAW,aAAX,EAA0B,uBAA1B,CAAf;AACAD,cAAQQ,GAAR,CAAYC,IAAZ,GAAsBT,QAAQU,GAAR,EAAtB,0BAAwDV,QAAQQ,GAAR,CAAYC,IAApE;AACAX,uBAAOI,MAAP,GACGC,IADH,CACQ,UAACQ,MAAD,EAAY;AAChBf,qBAAOW,KAAP,CAAaI,MAAb,EAAqB,UAArB;AACAZ;AACD,OAJH,EAKGM,KALH,CAKS,YAAM;AACXT,qBAAOQ,IAAP;AACAL;AACD,OARH;AAUD,KAbD;AAcD,GAvDD;AAwDD,CAnED","file":"galaxy.js","sourcesContent":["/* global describe it */\n\n// eslint-disable-next-line\nimport { assert } from \"chai\";\n\nimport galaxy from \"../galaxy\";\n\ndescribe(\"galaxy\", () => {\n  describe(\"exported functions\", () => {\n    const exportedFunctions = [\n      \"deploy\",\n    ];\n    exportedFunctions.map(exportedFunction => (\n      it(`should have ${exportedFunction}`, () => {\n        assert.isOk(galaxy[exportedFunction]);\n      })\n    ));\n  });\n  describe(\"deploy\", () => {\n    it(\"should reject if no server\", (done) => {\n      process.argv = [];\n      galaxy.deploy()\n        .then(() => {\n          assert.fail();\n          done();\n        })\n        .catch((error) => {\n          assert.equal(error, \"Please provide a server as the second argument\");\n          done();\n        })\n      ;\n    });\n    it(\"should reject if meteor CLI error\", (done) => {\n      process.argv = [\"deploy\", \"example.com\"];\n      galaxy.deploy()\n        .then(() => {\n          assert.fail();\n          done();\n        })\n        .catch((error) => {\n          assert.isOk(error);\n          done();\n        })\n      ;\n    });\n    it(\"should call meteor to deploy\", (done) => {\n      process.argv = [\"deploy\", \"example.com\"];\n      process.env.PATH = `${process.cwd()}/src/__test/mocks:${process.env.PATH}`;\n      galaxy.deploy()\n        .then((result) => {\n          assert.equal(result, \"deployed\");\n          done();\n        })\n        .catch(() => {\n          assert.fail();\n          done();\n        })\n      ;\n    });\n    it(\"should call meteor with settings\", (done) => {\n      process.argv = [\"deploy\", \"example.com\", \"path/to/settting.json\"];\n      process.env.PATH = `${process.cwd()}/src/__test/mocks:${process.env.PATH}`;\n      galaxy.deploy()\n        .then((result) => {\n          assert.equal(result, \"deployed\");\n          done();\n        })\n        .catch(() => {\n          assert.fail();\n          done();\n        })\n      ;\n    });\n  });\n});\n"]}