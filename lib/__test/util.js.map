{"version":3,"sources":["../../src/__test/util.js"],"names":["describe","beforeEach","require","cache","process","cwd","it","results","util","generateSettings","assert","deepEqual","WOW","env","ANDROID_ZIPALIGN","equal","HOME","METEOR_INPUT_DIR","METEOR_OUTPUT_DIR","METEOR_OUTPUT_ABSOLUTE","FL_REPORT_PATH","XCODE_PROJECT","SIGH_OUTPUT_PATH","GYM_OUTPUT_DIRECTORY","afterEach","argv","result","launchFile","isFalse","isTrue","done","init","then","response","include","error","fail","PATH","importCerts","hasPlatform","getVersion","version","rimraf","sync","cleanMeteorOutputDir"],"mappings":"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","file":"util.js","sourcesContent":["/* global describe it beforeEach afterEach */\n\n// eslint-disable-next-line\nimport { assert } from \"chai\";\nimport { execSync } from \"child_process\";\nimport { resolve } from \"path\";\nimport { statSync } from \"fs\";\nimport rimraf from \"rimraf\";\nimport { version } from \"../../package.json\";\n\nimport util from \"../util\";\n\ndescribe(\"generateSettings\", () => {\n  beforeEach(() => {\n    delete require.cache[\n      `${process.cwd()}/launch.json`\n    ];\n  });\n  it(\"should return a blank object if no launch file\", () => {\n    const results = util.generateSettings({});\n    assert.deepEqual(results, {});\n  });\n  it(\"should pass any random env var\", () => {\n    // eslint-disable-next-line\n    execSync(`echo '{\"ANDROID_ZIPALIGN\": \"/nonsense\", \"WOW\": \"such\"}' > launch.json`);\n    const results = util.generateSettings({});\n    assert.deepEqual(results.WOW, \"such\");\n  });\n  describe(\"ANDROID_ZIPALIGN\", () => {\n    beforeEach(() => {\n      delete process.env.ANDROID_ZIPALIGN;\n      // eslint-disable-next-line\n      execSync(`echo '{\"ANDROID_ZIPALIGN\": \"/nonsense\"}' > launch.json`);\n    });\n    it(\"should pass through absolute zipalign path\", () => {\n      process.env.ANDROID_ZIPALIGN = \"/meow\";\n      const results = util.generateSettings(process.env);\n      assert.equal(results.ANDROID_ZIPALIGN, \"/meow\");\n    });\n    it(\"should resolve home zipalign path\", () => {\n      process.env.ANDROID_ZIPALIGN = \"~/meow\";\n      const results = util.generateSettings(process.env);\n      assert.equal(results.ANDROID_ZIPALIGN, `${process.env.HOME}/meow`);\n    });\n    it(\"should resolve relative zipalign path\", () => {\n      process.env.ANDROID_ZIPALIGN = \"../meow\";\n      const results = util.generateSettings(process.env);\n      assert.equal(\n        results.ANDROID_ZIPALIGN,\n        resolve(\n          process.cwd(),\n          \"../meow\",\n        ),\n      );\n    });\n  });\n  describe(\"METEOR_INPUT_DIR\", () => {\n    beforeEach(() => {\n      delete require.cache[\n        `${process.cwd()}/launch.json`\n      ];\n    });\n    it(\"should be root directory if doesn't exists\", () => {\n      // eslint-disable-next-line\n      execSync(`echo '{}' > launch.json`);\n      const results = util.generateSettings(process.env);\n      assert.equal(results.METEOR_INPUT_DIR, process.cwd());\n    });\n    it(\"should be root directory if blank\", () => {\n      // eslint-disable-next-line\n      execSync(`echo '{\"METEOR_INPUT_DIR\": \"\"}' > launch.json`);\n      const results = util.generateSettings(process.env);\n      assert.equal(results.METEOR_INPUT_DIR, process.cwd());\n    });\n    it(\"should be absolute path to directory if set\", () => {\n      // eslint-disable-next-line\n      execSync(`echo '{\"METEOR_INPUT_DIR\": \"nonsense\"}' > launch.json`);\n      const results = util.generateSettings(process.env);\n      assert.equal(\n        results.METEOR_INPUT_DIR,\n        resolve(\n          process.cwd(),\n          \"nonsense\",\n        ),\n      );\n    });\n  });\n  describe(\"METEOR_OUTPUT_DIR\", () => {\n    beforeEach(() => {\n      delete require.cache[\n        `${process.cwd()}/launch.json`\n      ];\n    });\n    it(\"should set as .build if no METEOR_OUTPUT_DIR\", () => {\n      // eslint-disable-next-line\n      execSync(`echo '{}' > launch.json`);\n      const results = util.generateSettings(process.env);\n      assert.equal(results.METEOR_OUTPUT_DIR, \".build\");\n    });\n    it(\"should set as .build if blank METEOR_OUTPUT_DIR\", () => {\n      // eslint-disable-next-line\n      execSync(`echo '{\"METEOR_OUTPUT_DIR\": \"\"}' > launch.json`);\n      const results = util.generateSettings(process.env);\n      assert.equal(results.METEOR_OUTPUT_DIR, \".build\");\n    });\n    it(\"should set METEOR_OUTPUT_DIR if in launch.json\", () => {\n      // eslint-disable-next-line\n      execSync(`echo '{\"METEOR_OUTPUT_DIR\": \"../nonsense\"}' > launch.json`);\n      const results = util.generateSettings(process.env);\n      assert.equal(results.METEOR_OUTPUT_DIR, \"../nonsense\");\n    });\n  });\n  describe(\"METEOR_OUTPUT_ABSOLUTE\", () => {\n    beforeEach(() => {\n      delete require.cache[\n        `${process.cwd()}/launch.json`\n      ];\n    });\n    it(\"should set as absolute of .build if no METEOR_OUTPUT_DIR\", () => {\n      // eslint-disable-next-line\n      execSync(`echo '{}' > launch.json`);\n      const results = util.generateSettings(process.env);\n      assert.equal(results.METEOR_OUTPUT_ABSOLUTE, `${process.cwd()}/.build`);\n    });\n    it(\"should set as absolute of .build if blank METEOR_OUTPUT_DIR\", () => {\n      // eslint-disable-next-line\n      execSync(`echo '{\"METEOR_OUTPUT_DIR\": \"\"}' > launch.json`);\n      const results = util.generateSettings(process.env);\n      assert.equal(results.METEOR_OUTPUT_ABSOLUTE, `${process.cwd()}/.build`);\n    });\n    it(\"should set absolute of METEOR_OUTPUT_DIR if exists\", () => {\n      // eslint-disable-next-line\n      execSync(`echo '{\"METEOR_OUTPUT_DIR\": \"../nonsense\"}' > launch.json`);\n      const results = util.generateSettings(process.env);\n      assert.equal(\n        results.METEOR_OUTPUT_ABSOLUTE,\n        resolve(\n          process.cwd(),\n          \"..\",\n          \"nonsense\",\n        ),\n      );\n    });\n  });\n  describe(\"FL_REPORT_PATH\", () => {\n    beforeEach(() => {\n      delete require.cache[\n        `${process.cwd()}/launch.json`\n      ];\n    });\n    it(\"should use .build by default\", () => {\n      // eslint-disable-next-line\n      execSync(`echo '{}' > launch.json`);\n      const results = util.generateSettings(process.env);\n      assert.equal(results.FL_REPORT_PATH, resolve(\n        process.cwd(),\n        \".build\",\n        \"ios\",\n      ));\n    });\n    it(\"should use custom output dir if specified\", () => {\n      // eslint-disable-next-line\n      execSync(`echo '{\"METEOR_OUTPUT_DIR\": \"../nonsense\"}' > launch.json`);\n      const results = util.generateSettings(process.env);\n      assert.equal(results.FL_REPORT_PATH, resolve(\n        process.cwd(),\n        \"..\",\n        \"nonsense\",\n        \"ios\",\n      ));\n    });\n  });\n  describe(\"XCODE_PROJECT\", () => {\n    beforeEach(() => {\n      delete require.cache[\n        `${process.cwd()}/launch.json`\n      ];\n    });\n    it(\"should use .build by default\", () => {\n      // eslint-disable-next-line\n      execSync(`echo '{\"XCODE_SCHEME_NAME\": \"scheme\"}' > launch.json`);\n      const results = util.generateSettings(process.env);\n      assert.equal(results.XCODE_PROJECT, resolve(\n        process.cwd(),\n        \".build\",\n        \"ios\",\n        \"project\",\n        \"scheme.xcodeproj\",\n      ));\n    });\n    it(\"should use custom output dir if specified\", () => {\n      // eslint-disable-next-line\n      execSync(`echo '{\"XCODE_SCHEME_NAME\": \"scheme\", \"METEOR_OUTPUT_DIR\": \"../nonsense\"}' > launch.json`);\n      const results = util.generateSettings(process.env);\n      assert.equal(results.XCODE_PROJECT, resolve(\n        process.cwd(),\n        \"..\",\n        \"nonsense\",\n        \"ios\",\n        \"project\",\n        \"scheme.xcodeproj\",\n      ));\n    });\n  });\n  describe(\"SIGH_OUTPUT_PATH\", () => {\n    beforeEach(() => {\n      delete require.cache[\n        `${process.cwd()}/launch.json`\n      ];\n    });\n    it(\"should be the current directory\", () => {\n      // eslint-disable-next-line\n      execSync(`echo '{}' > launch.json`);\n      const results = util.generateSettings(process.env);\n      assert.equal(results.SIGH_OUTPUT_PATH, process.cwd());\n    });\n  });\n  describe(\"GYM_OUTPUT_DIRECTORY\", () => {\n    beforeEach(() => {\n      delete require.cache[\n        `${process.cwd()}/launch.json`\n      ];\n    });\n    it(\"should be the current directory\", () => {\n      // eslint-disable-next-line\n      execSync(`echo '{}' > launch.json`);\n      const results = util.generateSettings(process.env);\n      assert.equal(results.GYM_OUTPUT_DIRECTORY, process.cwd());\n    });\n  });\n  describe(\"overrides\", () => {\n    it(\"should override launch file with env vars\", () => {\n      // eslint-disable-next-line\n      execSync(`echo '{\"METEOR_OUTPUT_DIR\": \"something\"}' > launch.json`);\n      process.env.METEOR_OUTPUT_DIR = \"nothing\";\n      const results = util.generateSettings(process.env);\n      assert.equal(results.METEOR_OUTPUT_DIR, \"nothing\");\n    });\n    afterEach(() => {\n      delete process.env.METEOR_OUTPUT_DIR;\n    });\n  });\n});\ndescribe(\"launchFile\", () => {\n  describe(\"should short circuit if\", () => {\n    it(\"init action\", () => {\n      process.argv = [null, null, \"init\"];\n      const result = util.launchFile();\n      assert.isFalse(result);\n    });\n    it(\"help action\", () => {\n      process.argv = [null, null, \"help\"];\n      const result = util.launchFile();\n      assert.isFalse(result);\n    });\n    it(\"no action\", () => {\n      process.argv = [];\n      const result = util.launchFile();\n      assert.isFalse(result);\n    });\n    it(\"checking version\", () => {\n      process.argv = [null, null, \"--version\"];\n      const result = util.launchFile();\n      assert.isFalse(result);\n    });\n    it(\"checking version shortcut\", () => {\n      process.argv = [null, null, \"-v\"];\n      const result = util.launchFile();\n      assert.isFalse(result);\n    });\n  });\n  it(\"should error if no launch.json\");\n  it(\"should return true if launch.json\", () => {\n    // eslint-disable-next-line\n    execSync(`echo '{}' > launch.json`);\n    process.argv = [null, null, \"someaction\"];\n    const result = util.launchFile();\n    assert.isTrue(result);\n  });\n});\ndescribe(\"init\", () => {\n  it(\"should create launch.json if doesn't exist\", (done) => {\n    util.init()\n      .then((response) => {\n        assert.include(\n          response,\n          \"launch.json created. Open it and fill out the vars\",\n        );\n        try {\n          statSync(\"launch.json\");\n          done();\n        } catch (error) {\n          assert.fail();\n          done();\n        }\n      });\n  });\n  it(\"should do nothing if launch.json exists\", (done) => {\n    // eslint-disable-next-line\n    execSync(`echo '{}' > launch.json`);\n    util.init()\n      .then((response) => {\n        assert.include(\n          response,\n          \"launch.json already exists\",\n        );\n        try {\n          statSync(\"launch.json\");\n          assert.fail();\n          done();\n        } catch (error) {\n          done();\n        }\n      });\n  });\n});\ndescribe(\"importCerts\", () => {\n  it(\"should just work\", (done) => {\n    process.env.PATH = `${process.cwd()}/src/__test/mocks:${process.env.PATH}`;\n    util.importCerts()\n      .then((result) => {\n        assert.equal(result, \"imported\");\n        done();\n      })\n    ;\n  });\n});\ndescribe(\"hasPlatform\", () => {\n  it(\"should return true if has platform\", () => {\n    process.env.PATH = `${process.cwd()}/src/__test/mocks:${process.env.PATH}`;\n    const result = util.hasPlatform(\"android\");\n    assert.isTrue(result);\n  });\n  it(\"should return false if doesn't have platform\", () => {\n    process.env.PATH = `${process.cwd()}/src/__test/mocks:${process.env.PATH}`;\n    const result = util.hasPlatform(\"nonplatform\");\n    assert.isFalse(result);\n  });\n});\ndescribe(\"getVersion\", () => {\n  it(\"should return version number\", () => {\n    const result = util.getVersion();\n    assert.equal(result, version);\n  });\n});\ndescribe(\"cleanMeteorOutputDir\", () => {\n  it(\"should remove existing build folder\", (done) => {\n    rimraf.sync(\".build\");\n    execSync(\"mkdir .build && touch .build/test\");\n    statSync(\".build/test\");\n    process.env.METEOR_OUTPUT_DIR = \".build\";\n    util.cleanMeteorOutputDir(process.env);\n    try {\n      statSync(\".build\");\n    } catch (error) {\n      done();\n    }\n  });\n});\n"]}