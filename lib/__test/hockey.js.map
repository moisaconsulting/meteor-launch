{"version":3,"sources":["../../src/__test/hockey.js"],"names":["describe","exportedFunctions","map","it","exportedFunction","assert","isOk","hockey","done","process","env","PATH","cwd","uploadIOS","then","result","equal","uploadAndroid"],"mappings":";;AAGA;;AAEA;;;;;;AALA;;AAEA;AAKAA,SAAS,QAAT,EAAmB,YAAM;AACvBA,WAAS,oBAAT,EAA+B,YAAM;AACnC,QAAMC,oBAAoB,CACxB,WADwB,EAExB,eAFwB,CAA1B;AAIAA,sBAAkBC,GAAlB,CAAsB;AAAA,aACpBC,oBAAkBC,gBAAlB,EAAsC,YAAM;AAC1CC,qBAAOC,IAAP,CAAYC,iBAAOH,gBAAP,CAAZ;AACD,OAFD,CADoB;AAAA,KAAtB;AAKD,GAVD;AAWAJ,WAAS,WAAT,EAAsB,YAAM;AAC1BG,OAAG,gCAAH,EAAqC,UAACK,IAAD,EAAU;AAC7CC,cAAQC,GAAR,CAAYC,IAAZ,GAAsBF,QAAQG,GAAR,EAAtB,kCAAgEH,QAAQC,GAAR,CAAYC,IAA5E;AACAJ,uBAAOM,SAAP,CAAiBJ,QAAQC,GAAzB,EACGI,IADH,CACQ,UAACC,MAAD,EAAY;AAChBV,qBAAOW,KAAP,CAAaD,MAAb,EAAqB,SAArB;AACAP;AACD,OAJH;AAMD,KARD;AASAL,OAAG,sBAAH,EAA2B,UAACK,IAAD,EAAU;AACnCC,cAAQC,GAAR,CAAYC,IAAZ,GAAsBF,QAAQG,GAAR,EAAtB,0BAAwDH,QAAQC,GAAR,CAAYC,IAApE;AACAJ,uBAAOM,SAAP,CAAiBJ,QAAQC,GAAzB,EACGI,IADH,CACQ,UAACC,MAAD,EAAY;AAChBV,qBAAOW,KAAP,CAAaD,MAAb,EAAqB,UAArB;AACAP;AACD,OAJH;AAMD,KARD;AASD,GAnBD;AAoBAR,WAAS,eAAT,EAA0B,YAAM;AAC9BG,OAAG,0CAAH,EAA+C,UAACK,IAAD,EAAU;AACvDC,cAAQC,GAAR,CAAYC,IAAZ,GAAsBF,QAAQG,GAAR,EAAtB,8BAA4DH,QAAQC,GAAR,CAAYC,IAAxE;AACAJ,uBAAOU,aAAP,CAAqBR,QAAQC,GAA7B,EACGI,IADH,CACQ,UAACC,MAAD,EAAY;AAChBV,qBAAOW,KAAP,CAAaD,MAAb,EAAqB,SAArB;AACAP;AACD,OAJH;AAMD,KARD;AASAL,OAAG,wBAAH,EAA6B,UAACK,IAAD,EAAU;AACrCC,cAAQC,GAAR,CAAYC,IAAZ,GAAsBF,QAAQG,GAAR,EAAtB,0BAAwDH,QAAQC,GAAR,CAAYC,IAApE;AACAJ,uBAAOU,aAAP,CAAqBR,QAAQC,GAA7B,EACGI,IADH,CACQ,UAACC,MAAD,EAAY;AAChBV,qBAAOW,KAAP,CAAaD,MAAb,EAAqB,UAArB;AACAP;AACD,OAJH;AAMD,KARD;AASD,GAnBD;AAoBD,CApDD","file":"hockey.js","sourcesContent":["/* global describe it */\n\n// eslint-disable-next-line\nimport { assert } from \"chai\";\n\nimport hockey from \"../hockey\";\n\ndescribe(\"hockey\", () => {\n  describe(\"exported functions\", () => {\n    const exportedFunctions = [\n      \"uploadIOS\",\n      \"uploadAndroid\",\n    ];\n    exportedFunctions.map(exportedFunction => (\n      it(`should have ${exportedFunction}`, () => {\n        assert.isOk(hockey[exportedFunction]);\n      })\n    ));\n  });\n  describe(\"uploadIOS\", () => {\n    it(\"should skip if no ios platform\", (done) => {\n      process.env.PATH = `${process.cwd()}/src/__test/mocks/android:${process.env.PATH}`;\n      hockey.uploadIOS(process.env)\n        .then((result) => {\n          assert.equal(result, \"skipped\");\n          done();\n        })\n      ;\n    });\n    it(\"should call fastlane\", (done) => {\n      process.env.PATH = `${process.cwd()}/src/__test/mocks:${process.env.PATH}`;\n      hockey.uploadIOS(process.env)\n        .then((result) => {\n          assert.equal(result, \"uploaded\");\n          done();\n        })\n      ;\n    });\n  });\n  describe(\"uploadAndroid\", () => {\n    it(\"should do nothing if no android platform\", (done) => {\n      process.env.PATH = `${process.cwd()}/src/__test/mocks/ios:${process.env.PATH}`;\n      hockey.uploadAndroid(process.env)\n        .then((result) => {\n          assert.equal(result, \"skipped\");\n          done();\n        })\n      ;\n    });\n    it(\"should curl hockey API\", (done) => {\n      process.env.PATH = `${process.cwd()}/src/__test/mocks:${process.env.PATH}`;\n      hockey.uploadAndroid(process.env)\n        .then((result) => {\n          assert.equal(result, \"uploaded\");\n          done();\n        })\n      ;\n    });\n  });\n});\n"]}