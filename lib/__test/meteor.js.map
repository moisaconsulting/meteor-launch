{"version":3,"sources":["../../src/__test/meteor.js"],"names":["describe","exportedFunctions","map","it","exportedFunction","assert","isOk","meteor","done","process","argv","env","PATH","cwd","build","catch","error","METEOR_INPUT_DIR","then","result","equal","timeout","XCODE_PROJECT"],"mappings":"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","file":"meteor.js","sourcesContent":["/* global describe it */\n\n// eslint-disable-next-line\nimport { assert } from \"chai\";\n\nimport meteor from \"../meteor\";\n\ndescribe(\"meteor\", () => {\n  describe(\"exported functions\", () => {\n    const exportedFunctions = [\n      \"build\",\n    ];\n    exportedFunctions.map(exportedFunction => (\n      it(`should have ${exportedFunction}`, () => {\n        assert.isOk(meteor[exportedFunction]);\n      })\n    ));\n  });\n  describe(\"build\", () => {\n    it(\"should reject if no server param\", (done) => {\n      process.argv = [];\n      process.env.PATH = `${process.cwd()}/src/__test/mocks:${process.env.PATH}`;\n      meteor.build(process.env)\n        .catch((error) => {\n          assert.isOk(error);\n          done();\n        })\n      ;\n    });\n    it(\"should reject if exec error\", (done) => {\n      process.argv = [\"build\", \"example.com\"];\n      process.env.PATH = `${process.cwd()}/src/__test/mocks:${process.env.PATH}`;\n      process.env.METEOR_INPUT_DIR = \"blahblah\";\n      meteor.build(process.env)\n        .catch((error) => {\n          assert.isOk(error);\n          done();\n        })\n      ;\n    });\n    it(\"should call meteor\", (done) => {\n      process.argv = [\"build\", \"example.com\"];\n      process.env.PATH = `${process.cwd()}/src/__test/mocks:${process.env.PATH}`;\n      process.env.METEOR_INPUT_DIR = \".\";\n      meteor.build(process.env)\n        .then((result) => {\n          assert.equal(result, \"built\");\n          done();\n        })\n      ;\n    });\n    it(\"should call meteor with settings\", (done) => {\n      process.argv = [\"build\", \"example.com\", \"path/to/settings.json\"];\n      process.env.PATH = `${process.cwd()}/src/__test/mocks:${process.env.PATH}`;\n      process.env.METEOR_INPUT_DIR = \".\";\n      meteor.build(process.env)\n        .then((result) => {\n          assert.equal(result, \"built\");\n          done();\n        })\n      ;\n    });\n    // no arrow syntax to preserve `this`\n    // eslint-disable-next-line func-names\n    it(\"should try to open xcode and wait 5 seconds\", function (done) {\n      this.timeout(6000);\n      process.argv = [\"build\", \"example.com\", \"path/to/settings.json\"];\n      process.env.PATH = `${process.cwd()}/src/__test/mocks:${process.env.PATH}`;\n      process.env.METEOR_INPUT_DIR = \".\";\n      process.env.XCODE_PROJECT = \".\";\n      meteor.build(process.env)\n        .then((result) => {\n          assert.equal(result, \"built\");\n          done();\n        })\n      ;\n    });\n  });\n});\n"]}